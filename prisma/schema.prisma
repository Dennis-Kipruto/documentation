// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Add password field
  role          String    @default("user") // user, admin
  accounts      Account[]
  sessions      Session[]
  permissions   UserPermission[]
  versionPerms  VersionPermission[]
  modulePerms   ModulePermission[]
  publishedDocuments Document[] @relation("PublishedDocuments")
  updatedDocuments   Document[] @relation("UpdatedDocuments")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Version {
  id            String   @id @default(cuid())
  name          String   @unique // e.g., "v1.0", "v2.0"
  displayName   String   // e.g., "Version 1.0"
  isActive      Boolean  @default(true)
  order         Int      @default(0)
  modules       Module[]
  permissions   VersionPermission[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Module {
  id            String   @id @default(cuid())
  name          String   // folder name
  displayName   String   // human readable name
  versionId     String
  version       Version  @relation(fields: [versionId], references: [id], onDelete: Cascade)
  chapters      Chapter[]
  permissions   ModulePermission[]
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([versionId, name])
}

model Chapter {
  id            String   @id @default(cuid())
  name          String   // folder name
  displayName   String   // from frontmatter or filename
  moduleId      String
  module        Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  documents     Document[]
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([moduleId, name])
}

model Document {
  id            String   @id @default(cuid())
  filename      String   // .md filename
  title         String   // from frontmatter or filename
  content       String   // processed HTML
  rawContent    String   // original markdown
  excerpt       String?  // for search results
  chapterId     String
  chapter       Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  order         Int      @default(0)
  publishedById String?
  publishedBy   User?    @relation("PublishedDocuments", fields: [publishedById], references: [id])
  updatedById   String?
  updatedBy     User?    @relation("UpdatedDocuments", fields: [updatedById], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([chapterId, filename])
}

model UserPermission {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceType  String   // "version", "module", "chapter"
  resourceId    String
  permission    String   // "read", "admin"
  
  @@unique([userId, resourceType, resourceId])
}

model VersionPermission {
  id            String   @id @default(cuid())
  versionId     String
  version       Version  @relation(fields: [versionId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission    String   @default("read")
  
  @@unique([versionId, userId])
}

model ModulePermission {
  id            String   @id @default(cuid())
  moduleId      String
  module        Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission    String   @default("read")
  
  @@unique([moduleId, userId])
}

